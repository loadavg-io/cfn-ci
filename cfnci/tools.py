import time
import yaml
import botocore
import boto3
import uuid
from datetime import datetime
from clint.textui import columns, colored, puts


DESCRIBE_ATTEMPTS = 120
DESCRIBE_WAIT = 5
STATUS_NO_CHANGE = "The submitted information didn't contain changes. "\
                   "Submit different information to create a change set."

STACK_STATUS_COLOR = {
    'CREATE_COMPLETE': colored.green,
    'DELETE_COMPLETE': colored.green,
    'DELETE_SKIPPED': colored.green,
    'UPDATE_COMPLETE': colored.green,
    'CREATE_FAILED': colored.red,
    'DELETE_FAILED': colored.red,
    'UPDATE_FAILED': colored.red,
    'CREATE_IN_PROGRESS': colored.yellow,
    'DELETE_IN_PROGRESS': colored.yellow,
    'UPDATE_IN_PROGRESS': colored.yellow,
    'UPDATE_COMPLETE_CLEANUP_IN_PROGRESS': colored.yellow,
    }

STACK_STATUS_END = [
    'CREATE_COMPLETE',
    'DELETE_COMPLETE',
    'UPDATE_COMPLETE',
    'CREATE_FAILED',
    'UPDATE_FAILED',
    'DELETE_FAILED',
]
STACK_CHANGE_COLOR = {
    'CREATE': colored.green,
    'MODIFY': colored.yellow,
    'REPLACE': colored.red,
    'REMOVE': colored.red,
}


client = boto3.client('cloudformation')


def _display_stack_events(stack_arn, request_token=None):
    processed = set()
    for attempt in range(DESCRIBE_ATTEMPTS):
        response = client.describe_stack_events(
            StackName=stack_arn,
        )
        events = response['StackEvents']
        if request_token is not None:
            events = [
                event for event in events
                if event.get('ClientRequestToken') == request_token
            ]
        events.sort(key=lambda x: x['Timestamp'])
        for event in events:
            event_id = event['EventId']
            resource = event['LogicalResourceId']
            status = event['ResourceStatus']

            if event_id in processed:
                continue
            else:
                processed.add(event_id)

            color = STACK_STATUS_COLOR.get(status, colored.white)
            puts(columns([color(status), 35], [resource, 40]))
            if event['PhysicalResourceId'] == stack_arn and status in STACK_STATUS_END:
                return status
        time.sleep(DESCRIBE_WAIT)


def _display_stack_changes(changes):
    for change in changes:
        change = change['ResourceChange']
        resource = change['LogicalResourceId']
        if change['Action'] == 'Modify' and change['Replacement'] == 'True':
            action = 'REPLACE'
        else:
            action = change['Action'].upper()
        color = STACK_CHANGE_COLOR[action]
        puts(columns([color(action), 35], [resource, 40]))


def load_parameters(parameters_file='parameters.yml'):
    with open(parameters_file, 'r') as fd:
        parameters = yaml.load(fd)
    return [
        {
            'ParameterKey': key,
            'ParameterValue': value,
        }
        for key, value in parameters.items()
    ]


def exists(stack_name):
    waiter = client.get_waiter('stack_exists')
    try:
        waiter.wait(
            StackName=stack_name,
            WaiterConfig={
                'MaxAttempts': 1
            }
        )
        return True
    except botocore.exceptions.WaiterError:
        return False


def create(stack_name, template):
    request_token = str(uuid.uuid4())
    response = client.create_stack(
        StackName=stack_name,
        TemplateBody=template,
        Parameters=load_parameters(),
        #Tags=[{}],
        ClientRequestToken=request_token,
    )
    stack_arn = response['StackId']
    status = _display_stack_events(stack_arn, request_token)
    return stack_arn


def update(stack_name, template):
    request_token = str(uuid.uuid4())
    response = client.update_stack(
        StackName=stack_name,
        TemplateBody=template,
        Parameters=load_parameters(),
        #Tags=[{}],
        ClientRequestToken=request_token,
    )
    stack_arn = response['StackId']
    status = _display_stack_events(stack_arn, request_token)
    return stack_arn


def destroy(stack_arn):
    request_token = str(uuid.uuid4())
    client.delete_stack(
        StackName=stack_arn,
        ClientRequestToken=request_token,
    )
    status = _display_stack_events(stack_arn, request_token)
    return status


def create_change_set(stack_name, template, change_set_name=None, description=None):
    status = 'UNKNOWN'
    if change_set_name is None:
        change_set_name = 'cfn-ci-{}'.format(int(time.time()*1000))
    if description is None:
        description = 'Autogenerated by cfn-ci.'
    response = client.create_change_set(
        ChangeSetName=change_set_name,
        StackName=stack_name,
        Description=description,
        TemplateBody=template,
        Parameters=load_parameters(),
        #Tags=[{}],
    )
    change_set_arn = response['Id']
    for attempt in range(DESCRIBE_ATTEMPTS):
        response = client.describe_change_set(
            ChangeSetName=change_set_arn,
        )
        status = response['Status']
        changes = response['Changes']
        if status == 'FAILED' and response['StatusReason'] == STATUS_NO_CHANGE:
            client.delete_change_set(
                ChangeSetName=change_set_arn
            )
            status = 'NO_CHANGE'
            break
        elif status not in ['CREATE_IN_PROGRESS', 'CREATE_PENDING']:
            break
        time.sleep(DESCRIBE_WAIT)
    _display_stack_changes(changes)
    return change_set_arn


def show_change_set(change_set_arn):
    response = client.describe_change_set(
        ChangeSetName=change_set_arn,
    )
    if response['Status'] not in ['AVAILABLE', 'CREATE_COMPLETE']:
        print(response['Status'])
        return
    stack_arn = response['StackId']
    changes = response['Changes']
    _display_stack_changes(changes)


def apply_change_set(stack_arn, change_set_arn):
    request_token = str(uuid.uuid4())
    if stack_arn is not None:
        client.execute_change_set(
            ChangeSetName=change_set_arn,
            StackName=stack_arn,
            ClientRequestToken=request_token,
        )
    else:
        response = client.describe_change_set(
            ChangeSetName=change_set_arn,
        )
        stack_arn = response['StackId']
        client.execute_change_set(
            ChangeSetName=change_set_arn,
            ClientRequestToken=request_token,
        )
    status = _display_stack_events(stack_arn, request_token)
    return status
